{
    "collab_server" : "",
    "contents" : "options(shiny.maxRequestSize=1024*1024^2)\n\n\nlibrary(shiny)\nlibrary(ggplot2) \nlibrary(scales)\nlibrary(data.table)\nlibrary(bit64)\nlibrary(dygraphs)\nlibrary(xts)\nlibrary(shinythemes)\nsource(\"helpers.R\")\n\n\nshinyServer(function(input, output) {\n  #This function is repsonsible for loading in the selected file\n  energyData <- reactive({\n    inFile <- input$energy_file\n    if (is.null(inFile)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    energy.data <- fread(inFile$datapath, sep=\";\", dec=\".\", fill=TRUE)\n    if (input$post_checkbox) {\n      energy.data$Postcode <-\n        substr(energy.data$Postcode,start = 1, stop = 4)\n    }\n    return(energy.data)\n  })\n  \n  weatherData <- reactive({\n    inFile <- input$weather_file\n    if (is.null(inFile)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    #read.csv2(inFile$datapath)\n    read.table(inFile$datapath)\n  })\n  \n  #Retrieve postal code\n  output$postalCode <- renderUI({\n    if (is.null(input$energy_file)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    selectInput(\"pincode\",\"Select postal code\",sort(c(as.character(\n      unique(energyData()$Postcode)\n    ))))\n  })\n  \n  #Retrieve house number\n  output$houseNumber <- renderUI({\n    if (is.null(input$pincode)) {\n      # User has not selected a pincode yet\n      return(NULL)\n    }\n    selectInput(\"huisnummer\",\"Select house number\",\n                sort(c(as.character(\n                  unique(subset(\n                    energyData(), Postcode == input$pincode\n                  )$Huisnummer)\n                ))))\n  })\n  \n  #Retrieve category\n  output$category <- renderUI({\n    if (is.null(input$pincode) &\n        is.null(input$huisnummer)) {\n      # User has not selected a pincode yet\n      return(NULL)\n    }\n    selectInput(\"category\",\"Energy type\",\n                sort(c(as.character(\n                  unique(\n                    subset(\n                      energyData(), Postcode == input$pincode &\n                        Huisnummer == input$huisnummer)$EnergieType\n                  )\n                ))), \"Elektra\")\n  })\n  \n  #PLot household energy consumption\n  output$dygraph  <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$pincode) &\n        is.null(input$huisnummer) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date.smooth <- input$radio[1]\n    plot_house(\n      date.smooth, energy_file = energyData(), weather_file = weatherData(),\n      pincode = input$pincode, huisnummer = input$huisnummer,\n      category = input$category, use_weather = FALSE )\n  })\n  \n  #PLot household energy consumption with temperature\n  output$dygraph_weather  <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$pincode) &\n        is.null(input$huisnummer) &\n        is.null(input$register) &\n        is.null(input$category) &\n        is.null(input$weather_file)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date.smooth <- input$radio[1]\n    plot_house(\n      date.smooth, energy_file = energyData(), weather_file = weatherData(),\n      pincode = input$pincode, huisnummer = input$huisnummer,\n      register = input$register, category = input$category, use_weather =\n        TRUE\n    )\n  })\n  \n  output$dygraph_house_box  <- renderPlot({\n    if (is.null(input$energy_file) &\n        is.null(input$pincode) &\n        is.null(input$huisnummer) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    if (input$category == \"Elektra\") {\n      energy_unit <- \"kWh\"\n      nat_avg = 9\n    } else {\n      energy_unit <- \"m^3\"\n      nat_avg <- 3.835\n    }\n    \n    house <- subset(\n      energyData(), Postcode == input$pincode &\n        Huisnummer == input$huisnummer\n      & EnergieType == input$category\n    )\n    \n    \n    house$Datum <- as.POSIXct(house$Datum, format = \"%Y-%m-%d %H:%M\", \n                              tz = \"Europe/Amsterdam\")\n    \n    #sample[order(sample$Datum),]\n    house <-\n      subset(house, select = c(Datum, Register, Meetwaarde))\n    house$EnergieType <- as.factor(house$Register)\n    if(input$category==\"Gas\"){\n    house$Meetwaarde[house$EnergieType == \"Gas\"] <-\n      house$Meetwaarde[house$EnergieType == \"Gas\"] * 9.769}\n    \n    ggplot(house, aes(\n      y = Meetwaarde, x = reorder(format(Datum,\"%W\\n%b\\n%Y\"), Datum),\n      fill = Register\n    )) +\n      geom_boxplot() + ylab(\"kWh\") +  xlab(\"\") +\n      facet_grid(Register ~ ., scales =\n                   \"free_y\") +      \n      labs(title  = paste( as.character(input$category), \n        \" consumption per week\")) +\n      stat_summary(fun.y = mean, geom = \"line\", aes(group = 1)) +\n      theme(\n        axis.text.x = element_text(vjust = 0.5, hjust = 1),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        legend.text = element_text(size = 15,face = \"bold\")\n      )\n  })\n  \n  #PLot postal code energy cosumption\n  output$pin_dygraph <- renderDygraph({\n    if (is.null(input$energy_file)\n        & is.null(input$pincode) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date.smooth <- input$radio[1]\n    plot_pincode(\n      date.smooth, energy_file = energyData(), weather_file = weatherData(),\n      pincode = input$pincode, category = input$category, use_weather = FALSE )\n  })\n  \n  #pin box plot\n  output$pin_boxplot <- renderPlot({\n    if (is.null(input$energy_file))\n    {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    \n    sample <- subset(energyData(), Postcode == input$pincode\n                     & EnergieType == input$category)\n    sample$Datum <- as.POSIXct(sample$Datum, format = \"%Y-%m-%d %H:%M\", \n                                  tz = \"Europe/Amsterdam\")\n \n    sample$Huisnummer <- as.factor(sample$Huisnummer)\n    sample$Register <- as.factor(sample$Register)\n    new_sub <-\n      subset(sample, select = c(Datum, Postcode, Huisnummer, Register, Meetwaarde))\n\n      ggplot(new_sub, aes(\n      y = Meetwaarde, x = reorder(format(Datum,\"%W\\n%b\\n%Y\"), Datum),\n      fill = Huisnummer\n    )) +  geom_boxplot(outlier.size = NA) + facet_grid(Register ~ ., scales =\n                                                         \"free_y\") +\n      #qplot(x=Postcode, y=mean, fill=EnergieType, data=means, geom=\"bar\", stat=\"identity\", position=\"dodge\")+\n      xlab(\"Date\") + ylab(\"kWh\") +\n      labs(title  = paste(\"PostCode : \", as.character(input$pincode))) +\n      stat_summary(fun.y = mean, geom = \"line\", aes(group = 1)) +\n      theme(\n        axis.text.x = element_text(vjust = 0.5, hjust = 1),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        legend.text = element_text(size = 15,face = \"bold\")\n      )\n    \n  })\n\n  #arima identification\n  output$house_arima_acf <- renderPlot({\n    if (is.null(input$energy_file)\n        | is.null(input$pincode) |\n        is.null(input$huisnummer)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    \n    #ARIMA\n    arimaData <- prepareData()\n    arima_identify(arimaData)\n  })\n  \n  #arima print estimation\n  output$house_arima_estimate <- renderPrint({\n    if (is.null(input$energy_file)\n        | is.null(input$pincode) |\n        is.null(input$huisnummer)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }    \n    arimaData <- prepareData()\n    summary(fit_arima(arimaData))\n  })  \n  \n  #plot tsdiag\n  output$house_arima_tsdiag <- renderPlot({\n    if (is.null(input$energy_file) &\n        is.null(input$pincode) &\n        is.null(input$huisnummer) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    arimaData <- prepareData()\n    plot_arima_tsdiag(arimaData)\n  })\n  \n  #fit and plot arima\n  output$house_arima <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$pincode) &\n        is.null(input$huisnummer) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    arimaData <- prepareData()\n    date_range <- input$radio[1]\n    plot_arima(arimaData, date_range)\n  })\n  \n  output$fitHMM <- renderPrint({\n    if (is.null(input$energy_file)\n        | is.null(input$pincode) |\n        is.null(input$huisnummer)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }    \n    hmmdata <- prepareData()\n    k <- as.numeric(input$k[1])\n    summary(fit_hmm(hmmdata,k))\n  })\n  \n  #visualise HMM\n  output$house_hmm <- renderPlot({\n    if (is.null(input$energy_file)\n        | is.null(input$pincode) |\n        is.null(input$huisnummer)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }    \n    k=as.numeric(input$k[1])\n    hmmdata <- prepareData()\n    fm <- fit_hmm(hmmdata, k)\n    probs <- posterior(fm)        \n    # Lets change the name\n    colnames(probs)[2:(k+1)] <- paste(\"S\",1:k, sep=\"-\")\n    # Create dta.frame\n    dfu <- data.table(cbind(datum=index(hmmdata),net=coredata(hmmdata)[,\"net\"], probs[,2:(k+1)]))\n    dfm <- melt(dfu[1:100], id.vars = \"datum\",)\n    ggplot(dfm,aes(datum,value)) + geom_line()+ \n      facet_grid(variable ~ ., scales=\"free_y\") + theme_bw()\n  })  \n  \n  \n  #prepare data for TS models\n  prepareData <- reactive({\n    if (is.null(input$energy_file)&\n        is.null(input$pincode) &\n        is.null(input$huisnummer)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date_range <- input$radio[1]\n    house <- subset(\n      energyData(), Postcode == input$pincode &\n        Huisnummer == input$huisnummer &\n        EnergieType == input$category )\n    \n    house$Datum <- as.POSIXct(house$Datum, format = \"%Y-%m-%d %H:%M\", \n                              tz = \"Europe/Amsterdam\")\n    \n    house <-\n      subset(house, select = c(Datum, Register, Meetwaarde))\n    house$Register <- as.factor(house$Register)\n    houseWide <- dcast(house, Datum ~ Register, value.var = \"Meetwaarde\" )\n    if (length(levels(house$Register)) > 1){\n      houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 \n      houseWide$net <- houseWide$`1.8.0`+ houseWide$`2.8.0`\n    } else{\n      houseWide$net <- houseWide$`1.8.0`\n    }\n    \n    energyxts <- as.xts.data.table(houseWide)\n    \n    if (date_range == \"Day\") {\n      energy <- apply.daily(energyxts, FUN=mean)\n    } else if (date_range == \"Week\") {\n      energy <- apply.weekly(energyxts, FUN=mean)\n    } else if (date_range == \"Month\") {\n      energy <- apply.monthly(energyxts, FUN=mean)\n    }  else if(date_range==\"15min\"){\n      energy <- energyxts\n    }         \n    return(energy)\n  })\n  \n  function(input, output, session) {\n    \n    session$onSessionEnded(function() {\n      stopApp()\n      q(\"no\")\n    })\n  }\n  \n})",
    "created" : 1498739498713.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2927073608",
    "id" : "97BC8436",
    "lastKnownWriteTime" : 1499687516,
    "last_content_update" : 1499687516262,
    "path" : "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}