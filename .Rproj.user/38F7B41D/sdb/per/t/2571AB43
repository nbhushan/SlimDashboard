{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(ggplot2) # load ggplot\nlibrary(scales)\nlibrary(dygraphs)\nlibrary(xts)\nlibrary(forecast)\nlibrary(ggfortify)\nlibrary(depmixS4)\nrequire(wesanderson)\nrequire(lubridate)\n\ndyCrosshair <- function(dygraph, \n                        direction = c(\"both\", \"horizontal\", \"vertical\")) {\n  dyPlugin(\n    dygraph = dygraph,\n    name = \"Crosshair\",\n    path = system.file(\"crosshair.js\", \n                       package = \"dygraphs\"),\n    options = list(direction = match.arg(direction))\n  )\n}\n\nplot_house <- function(date_range =NULL, energy_file=NULL, weather_file=NULL, EAN,category, use_weather=FALSE)\n{\n  if(category == \"Elektra\") {\n    energy_unit <- \"kWh\"\n  } else { \n    energy_unit <- \"m^3\"\n  }\n  \n  house <- subset(\n    energy_file, EAN == EAN &\n      EnergieType == category )\n  \n  house$Datum <- as.POSIXct(house$Datum, format=\"%Y-%m-%dT%H:%M:%SZ\", \n                            tz = \"Europe/Amsterdam\")\n  house <-\n    subset(house, select = c(Datum, Register, Meetwaarde))\n  house$Register <- as.factor(house$Register)\n  houseWide <- dcast(house, Datum ~ Register, value.var = \"Meetwaarde\", fun.aggregate = mean )\n\n  energyxts <-\n    xts(houseWide[,-1], order.by = houseWide$Datum)\n  \n    if (date_range == \"Daily\") {\n      energy <- apply.daily(energyxts, FUN=colSums)\n    }    else if (date_range == \"Hourly\") {\n      energy <- period.apply(energyxts, endpoints(energyxts, \"hours\"), colSums)\n    }    else if (date_range == \"Monthly\") {\n      energy <- apply.monthly(energyxts, FUN=colSums)\n    }    else if(date_range==\"15min\"){\n      energy <- energyxts\n    }\n  agg.xts <- energy[, 1] - energy[, 2]\n  colnames(agg.xts) <- \"meetwaarde\"\n  \n    dygraph(agg.xts) %>%\n      dyOptions(colors = wes_palette(\"Darjeeling1\"))  %>%\n      dyLegend(width = 250) %>%\n      dyLimit(\"0\") %>%\n      #dyHighlight(highlightSeriesOpts = list(strokeWidth = 1.2)) %>%\n      dyAxis(\"x\", drawGrid = FALSE) %>%\n      dyAxis(\n        \"y\", axisLineWidth = 0.01,drawGrid = TRUE, label = energy_unit\n      ) %>%\n      dyOptions(includeZero = TRUE, gridLineColor = \"lightgray\",gridLineWidth=0.1)  %>%\n      dyRangeSelector()  \n  }\n\n# plot_house_box <- function(energy_file=NULL, weather_file=NULL, EAN, register, category, use_weather=FALSE)\n# {\n#  \n#   if (category == \"Elektra\") {\n#     energy_unit <- \"kWh\"\n#     nat_avg = 9\n#   } else { \n#     energy_unit <- \"m^3\"\n#     nat_avg <- 3.835\n#   }\n#   \n#   house <- subset(\n#     energy_file,EAN == EAN &\n#       EnergieType == category & Register == register\n#   )\n# \n#   house <- subset(house, select = c(Datum, EnergieType, Meetwaarde))\n#   house$EnergieType <- as.factor(house$EnergieType)\n#   house$Datum <- as.POSIXct(house$Datum, format=\"%Y-%m-%dT%H:%M:%SZ\", \n#                             tz = \"Europe/Amsterdam\")\n#   \n#   \n#   ggplot(house) + \n#     geom_boxplot(aes_string(y=Meetwaarde, x=reorder(format(house$Datum, '%b-%Y'), house$Datum), \n#                      fill = EnergieType)) + ylab(energy_unit) +\n#     labs(title  = \"Energy consumption boxplot\") +\n#     theme(\n#       axis.text.x = element_text(\n#         angle = 90, vjust = 0.5, hjust = 1\n#       ),\n#       panel.grid.major = element_blank(),\n#       panel.grid.minor = element_blank(),\n#       panel.background = element_blank(),\n#       legend.text = element_text(size = 15,face = \"bold\")\n#     )\n# \n# \n# }\n# \n# plot_pincode <- function(date_range =NULL, energy_file=NULL, weather_file=NULL,  category, use_weather=FALSE)\n# {\n#   if (category == \"Elektra\") {\n#     energy_unit <- \"kWh\"\n#     nat_avg = 9\n#   } else { \n#     energy_unit <- \"m^3\"\n#     nat_avg <- 3.835\n#   }\n#   \n#   house <- subset(\n#     energy_file,  EnergieType == category )\n#   \n#   house$Datum <-\n#     as.POSIXct(house$Datum, format = \"%Y-%m-%d %H:%M\", \n#                tz = \"Europe/Amsterdam\")\n#   \n#   house <-\n#     subset(house, select = c(Datum, EAN, Register, Meetwaarde))\n#   house$Register <- as.factor(house$Register)\n#   house$Huisnummer <- as.factor(house$EAN)\n#   \n#   if(category==\"Gas\"){\n#     house$Meetwaarde[house$EnergieType == \"Gas\"] <-\n#       house$Meetwaarde[house$EnergieType == \"Gas\"] * 9.769}\n#   if (length(levels(house$Register)) > 1){\n#     house$Meetwaarde[house$Register == \"2.8.0\"] <-\n#       house$Meetwaarde[house$Register == \"2.8.0\"] * -1}  \n#   \n#   houseWide <- dcast(house, Datum ~ Huisnummer+Register, value.var = \"Meetwaarde\" )\n#   colnames(houseWide) <- c(\"Datum\", \"from grid\", \"to grid\")\n#   energyxts <-\n#     xts(houseWide[,-1], order.by = houseWide$Datum)\n#   \n# \n#     if (date_range == \"Day\") {\n#       energy <- apply.daily(energyxts, FUN=mean)\n#     }\n#     else if (date_range == \"Week\") {\n#       energy <- apply.weekly(energyxts, FUN=mean)\n#     }\n#     else if (date_range == \"Month\") {\n#       energy <- apply.monthly(energyxts, FUN=mean)\n#     }\n#     else if(date_range==\"15min\"){\n#       energy <- energyxts\n#     }\n#     \n#     dygraph(energy, main = paste(\n#       \"Energy consumption: \", as.character(category)\n#     )) %>%\n#       dyLimit(\n#         nat_avg, label = \"National Mean\", labelLoc = \"right\",\n#         color = \"grey\", strokePattern = \"dashed\"\n#       ) %>%\n#       dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))  %>%\n#       dyLegend(width = 400) %>%\n#       dyHighlight(highlightSeriesOpts = list(strokeWidth = 1.5)) %>%\n#       dyAxis(\"x\", drawGrid = FALSE) %>%\n#       dyAxis(\n#         \"y\", axisLineWidth = 0.01,drawGrid = FALSE, label = energy_unit\n#       ) %>%\n#       dyOptions(includeZero = TRUE)  %>%\n#       dyRangeSelector()  \n#   }\n\nplot_arima <- function(arima.ts, date_range)\n{\n  #acf(coredata(energy)[,\"net\"])\n  ar.fit <- fit_arima(arima.ts)\n  #arima.ts <- ts_timeSeries(arima.xts)\n  arima.forecast <- forecast(ar.fit, level = c(95), h = 12 )\n  all <- cbind(actual = arima.ts, \n               lwr = arima.forecast$lower,\n               upr = arima.forecast$upper,\n               pred = arima.forecast$mean)\n  t <- as.POSIXct(format(date_decimal(as.vector(time(all))), \"%Y-%m-%d %H:%M:%S\"))\n  all.xts <- xts(data.table(all), order.by = t)\n  \n  dygraph(all.xts) %>%\n    dySeries(\"actual\", label = \"Actual\") %>%\n    dySeries(c(\"lwr\", \"pred\", \"upr\"), label = \"Predicted\") %>%\n    dyAxis(\"y\", axisLineWidth = 0.01,drawGrid = TRUE, label = \"kWh\"\n    )\n}\n\nplot_arima_diag <- function(arima.ts, date_range)\n{\n  #acf(coredata(energy)[,\"net\"])\n  ar.fit <- fit_arima(arima.ts)\n  #arima.ts <- ts_timeSeries(arima.xts)\n  arima.forecast <- forecast(ar.fit, level = c(95), h = 12 )\n  all <- cbind(actual = arima.ts, \n               lwr = arima.forecast$lower,\n               upr = arima.forecast$upper,\n               pred = arima.forecast$mean)\n  t <- as.POSIXct(format(date_decimal(as.vector(time(all))), \"%Y-%m-%d %H:%M:%S\"))\n  all.xts <- xts(data.table(all), order.by = t)\n  \n  dygraph(all.xts, \"Energy consumption\") %>%\n    dySeries(\"actual\", label = \"Actual\") %>%\n    dySeries(c(\"lwr\", \"pred\", \"upr\"), label = \"Predicted\")\n}\n\nplot_arima_tsdiag <- function(energy)\n{\n  #acf(coredata(energy)[,\"net\"])\n  ar.fit <- fit_arima(energy)\n  ggtsdiag(ar.fit)\n}\n\narima_identify <- function(energy){\n  p1 <- autoplot(acf(energy, plot = FALSE))\n  p2 <- autoplot(pacf(energy, plot = FALSE), ylab = \"PACF\")\n  multiplot(p1, p2, cols=1)\n}\n\nfit_arima <- function(energy){\n  return(auto.arima(energy,stepwise=FALSE, approximation=FALSE,D=1))\n}\n\n#fitHMM\nfit_hmm <- function(energy, k){\n  set.seed(7)\n  #kmeans cluster\n  cl <- kmeans(coredata(energy), k, nstart = 50)\n  means <- as.vector(cl$centers)\n  sds <- sqrt(cl$tot.withinss / cl$size)\n  #Create HMM model\n  resp_init <- c(rbind(means,sds))\n  mod <- depmix(net~1, data=energy, nstates=k, respstart = resp_init)\n  fit.hmm <- fit(mod, verbose = FALSE) #fit\n  return(fit.hmm)\n} \n\nmultiplot <- function(..., plotlist = NULL, cols) {\n  require(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # Make the panel\n  plotCols = cols                          # Number of columns of plots\n  plotRows = ceiling(numPlots / plotCols) # Number of rows needed, calculated from # of cols\n  \n  # Set up the page\n  grid.newpage()\n  pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))\n  vplayout <- function(x, y)\n    viewport(layout.pos.row = x, layout.pos.col = y)\n  \n  # Make each plot, in the correct location\n  for (i in 1:numPlots) {\n    curRow = ceiling(i / plotCols)\n    curCol = (i - 1) %% plotCols + 1\n    print(plots[[i]], vp = vplayout(curRow, curCol))\n  }\n  \n}\n",
    "created" : 1551363768730.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "24|29|26|2|\n243|51|268|0|\n",
    "hash" : "1471100158",
    "id" : "2571AB43",
    "lastKnownWriteTime" : 1551378398,
    "last_content_update" : 1551378398215,
    "path" : "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}