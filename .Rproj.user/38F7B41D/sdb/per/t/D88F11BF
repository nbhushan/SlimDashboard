{
    "collab_server" : "",
    "contents" : "options(shiny.maxRequestSize = 1024 * 1024 ^ 2)\n\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(data.table)\nlibrary(bit64)\nlibrary(dygraphs)\nlibrary(xts)\nlibrary(shinythemes)\nsource(\"helpers.R\")\n\n\nshinyServer(function(input, output) {\n  #This function is repsonsible for loading in the selected file\n  energyData <- reactive({\n    inFile <- input$energy_file\n    if (is.null(inFile)) {\n      # User has not uploaded a file yet\n      #energy.data <- fread(\"exampleData/famig .csv\", sep=\";\", dec=\".\", fill=TRUE)\n      return(NULL)\n    }\n    energy.data <-\n      fread(inFile$datapath,\n            sep = \";\",\n            dec = \".\",\n            fill = TRUE)\n    return(energy.data)\n  })\n  \n  weatherData <- reactive({\n    inFile <- input$weather_file\n    if (is.null(inFile)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    #read.csv2(inFile$datapath)\n    read.table(inFile$datapath)\n  })\n  \n  #Retrieve postal code\n  output$EAN <- renderUI({\n    if (is.null(input$energy_file)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    selectInput(\"EAN\", \"Select EAN\", sort(c(as.character(\n      unique(energyData()$EAN)\n    ))))\n  })\n  \n  #Retrieve category\n  output$category <- renderUI({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN)) {\n      # User has not selected a pincode yet\n      return(NULL)\n    }\n    selectInput(\"category\", \"Energy type\",\n                sort(c(as.character(\n                  unique(subset(energyData(), EAN == input$EAN)$EnergieType)\n                ))), \"Elektra\")\n  })\n  \n  #PLot household energy consumption\n  output$dygraph  <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date.smooth <- input$radio[1]\n    plot_house(\n      date.smooth,\n      energy_file = energyData(),\n      weather_file = weatherData(),\n      EAN = input$EAN,\n      category = input$category,\n      use_weather = FALSE\n    )\n  })\n  \n  #PLot household energy consumption with temperature\n  output$dygraph_weather  <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$weather_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date.smooth <- input$radio[1]\n    plot_house(\n      date.smooth,\n      energy_file = energyData(),\n      weather_file = weatherData(),\n      EAN = input$EAN,\n      category = input$category,\n      use_weather = FALSE\n    )\n  })\n  \n  output$dygraph_house_box  <- renderPlot({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    if (input$category == \"Elektra\") {\n      energy_unit <- \"kWh\"\n    } else {\n      energy_unit <- \"m^3\"\n    }\n    date_range <- input$radio[1]\n    house <- subset(energyData(),\n                    EAN == input$EAN &\n                      EnergieType == input$category)\n    \n    \n    house$Datum <-\n      as.POSIXct(house$Datum, format = \"%Y-%m-%dT%H:%M:%SZ\",\n                 tz = \"Europe/Amsterdam\")\n    \n    #sample[order(sample$Datum),]\n    house <-\n      subset(house, select = c(Datum, Register, Meetwaarde))\n    house$Register <- as.factor(house$Register)\n    # if(input$category==\"Gas\"){\n    # house$Meetwaarde[house$EnergieType == \"Gas\"] <-\n    #   house$Meetwaarde[house$EnergieType == \"Gas\"] * 9.769}\n    houseWide <-\n      dcast(house,\n            Datum ~ Register,\n            value.var = \"Meetwaarde\",\n            fun.aggregate = mean)\n    if (length(levels(house$Register)) > 1) {\n      houseWide$`2.8.0` <- houseWide$`2.8.0` * -1\n    }\n    energyxts <-\n      xts(houseWide[, -1], order.by = houseWide$Datum)\n    \n    if (date_range == \"Daily\") {\n      energy <- apply.daily(energyxts, FUN = colSums)\n    }    else if (date_range == \"Hourly\") {\n      energy <-\n        period.apply(energyxts, endpoints(energyxts, \"hours\"), colSums)\n    }    else if (date_range == \"Monthly\") {\n      energy <- apply.monthly(energyxts, FUN = colSums)\n    }    else if (date_range == \"15min\") {\n      energy <- energyxts\n    }\n    colnames(energy) <- c(\"fromGrid\", \"toGrid\")\n    house.df <-  data.frame(Datum = index(energy), coredata(energy))\n    house.df.long <- melt(house.df, id.vars =  \"Datum\")\n    \n    if (date_range == \"Daily\") {\n      X <-\n        reorder(format(house.df.long$Datum, \"%A\"),\n                house.df.long$Datum,\n                order = T)\n    }    else if (date_range == \"Hourly\") {\n      X <-\n        reorder(format(house.df.long$Datum, \"%H\"),\n                house.df.long$Datum,\n                order = T)\n    }    else if (date_range == \"Monthly\") {\n      X <-\n        reorder(format(house.df.long$Datum, \"%B\"),\n                house.df.long$Datum,\n                order = T)\n    }    else if (date_range == \"15min\") {\n      X <-\n        reorder(format(house.df.long$Datum, \"%H\\n%b\\n%Y\"),\n                house.df.long$Datum,\n                order = T)\n    }\n    \n    \n    ggplot(house.df.long, aes(y = value, x = X,\n                              fill = variable)) +\n      #geom_violin(trim=FALSE) +\n      ylab(\"kWh\") +  xlab(\"\") + geom_boxplot(width=0.1)+\n      facet_grid(variable ~ ., scales =\n                   \"free_y\") +\n      scale_fill_manual(values = wes_palette(\"Darjeeling1\")) +\n      theme(\n        axis.text.x = element_text(vjust = 0.5, hjust = 1),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        legend.text      = element_text(size=15),\n        legend.position=\"top\"\n      )\n  })\n  \n  #PLot postal code energy cosumption\n  output$pin_dygraph <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date.smooth <- input$radio[1]\n    plot_pincode(\n      date.smooth,\n      energy_file = energyData(),\n      weather_file = weatherData(),\n      category = input$category,\n      use_weather = FALSE\n    )\n  })\n  \n  #pin box plot\n  output$pin_boxplot <- renderPlot({\n    if (is.null(input$energy_file))\n    {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    \n    sample <- subset(energyData(),\n                     Postcode == input$pincode\n                     & EnergieType == input$category)\n    sample$Datum <-\n      as.POSIXct(sample$Datum, format = \"%Y-%m-%d %H:%M\",\n                 tz = \"Europe/Amsterdam\")\n    \n    sample$Huisnummer <- as.factor(sample$Huisnummer)\n    sample$Register <- as.factor(sample$Register)\n    new_sub <-\n      subset(sample,\n             select = c(Datum, Postcode, Huisnummer, Register, Meetwaarde))\n    \n    ggplot(new_sub, aes(\n      y = Meetwaarde,\n      x = reorder(format(Datum, \"%W\\n%b\\n%Y\"), Datum),\n      fill = Huisnummer\n    )) +  geom_boxplot(outlier.size = NA) + facet_grid(Register ~ ., scales =\n                                                         \"free_y\") +\n      #qplot(x=Postcode, y=mean, fill=EnergieType, data=means, geom=\"bar\", stat=\"identity\", position=\"dodge\")+\n      xlab(\"Date\") + ylab(\"kWh\") +\n      labs(title  = paste(\"PostCode : \", as.character(input$pincode))) +\n      stat_summary(fun.y = mean, geom = \"line\", aes(group = 1)) +\n      theme(\n        axis.text.x = element_text(vjust = 0.5, hjust = 1),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        legend.text = element_text(size = 15, face = \"bold\")\n      )\n    \n  })\n  \n  #arima identification\n  output$house_arima_acf <- renderPlot({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    \n    #ARIMA\n    arimaData <- prepareData()\n    arima_identify(arimaData)\n  })\n  \n  #arima print estimation\n  output$house_arima_estimate <- renderPrint({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    arimaData <- prepareData()\n    summary(fit_arima(arimaData))\n  })\n  \n  #plot tsdiag\n  output$house_arima_tsdiag <- renderPlot({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    arimaData <- prepareData()\n    plot_arima_tsdiag(arimaData)\n  })\n  \n  #fit and plot arima\n  output$house_arima <- renderDygraph({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    arimaData <- prepareData()\n    date_range <- input$radio[1]\n    plot_arima(arimaData, date_range)\n  })\n  \n  output$fitHMM <- renderPrint({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    hmmdata <- prepareData()\n    k <- as.numeric(input$k[1])\n    summary(fit_hmm(hmmdata, k))\n  })\n  \n  #visualise HMM\n  output$house_hmm <- renderPlot({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    k = as.numeric(input$k[1])\n    hmmdata <- prepareData()\n    fm <- fit_hmm(hmmdata, k)\n    probs <- posterior(fm)\n    # Lets change the name\n    colnames(probs)[2:(k + 1)] <- paste(\"S\", 1:k, sep = \"-\")\n    # Create dta.frame\n    dfu <-\n      data.table(cbind(\n        datum = index(hmmdata),\n        net = coredata(hmmdata)[, \"net\"],\n        probs[, 2:(k + 1)]\n      ))\n    dfm <- melt(dfu[1:100], id.vars = \"datum\" )\n    ggplot(dfm, aes(datum, value)) + geom_line() +\n      facet_grid(variable ~ ., scales = \"free_y\") + theme_bw()\n  })\n  \n  \n  #prepare data for TS models\n  prepareData <- reactive({\n    if (is.null(input$energy_file) &\n        is.null(input$EAN) &\n        is.null(input$category)) {\n      # User has not uploaded a file yet\n      return(NULL)\n    }\n    date_range <- input$radio[1]\n    house <- subset(energyData(),\n                    EAN == input$EAN &\n                      EnergieType == input$category)\n    \n    #\"2017-06-28T00:00:00Z\"\n    house$Datum <-\n      as.POSIXct(house$Datum, format = \"%Y-%m-%dT%H:%M:%SZ\")\n    house <- na.omit(house, cols = \"Datum\", invert = FALSE)\n    house <-\n      subset(house, select = c(Datum, Register, Meetwaarde))\n    \n    house$Register <- as.factor(house$Register)\n    houseWide <-\n      dcast(house,\n            Datum ~ Register,\n            value.var = \"Meetwaarde\",\n            fun.aggregate = mean)\n    houseWide$`2.8.0` <-\n      replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)\n    \n    energyxts <-\n      xts(houseWide[, -1], order.by = houseWide$Datum)\n    \n    if (date_range == \"Daily\") {\n      energy <- apply.daily(energyxts, FUN=colSums)\n      frequency = 7\n      seasonal.periods=c(7, 365.25)\n    }  else if (date_range == \"Hourly\") {\n      energy <- period.apply(energyxts, endpoints(energyxts, \"hours\"), colSums)\n      frequency = 24*365\n      seasonal.periods=c(24,168,8766)\n    }  else if (date_range == \"Monthly\") {\n      energy <- apply.monthly(energyxts, FUN=colSums)\n      frequency = 12\n      seasonal.periods=c(12)\n    }  else if(date_range==\"15min\"){\n      energy <- energyxts\n      frequency = 60/15*24*365\n      seasonal.periods=c(96,336, 70128)\n    }\n    \n    #arima.xts <- energy\n    arima.xts <- energy[, 1] - energy[, 2]\n    colnames(arima.xts) <- \"meetwaarde\"\n    start.year <- year(start(arima.xts))\n    start.month <- month(start(arima.xts))\n    end.year <- year(end(arima.xts))\n    end.month <- month(end(arima.xts))\n    start.ts <- c(start.year, start.month)\n    end.ts <- c(end.year, end.month)\n    \n    arima.msts <- msts(coredata(arima.xts), \n                       start = start.ts,\n                       end = end.ts,\n                       seasonal.periods =  seasonal.periods)\n    return(arima.msts)\n  })\n  \n  output$downloadData <- downloadHandler(\n    filename = function() {\n      sprintf(\n        \"%s_%s_%s_%s_%s.csv\",\n        input$energy_file,\n        input$pincode,\n        input$huisnummer,\n        input$category,\n        input$radio[1]\n      )\n    },\n    # filename = function() { paste(input$energy_file,'_',\n    #                               input$pincode,'_',input$huisnummer,\n    #                               '_', input$category, '_', input$radio[1],'.csv', sep='') },\n    content = function(file) {\n      print(file)\n      fwrite(as.data.table(prepareData()), file, sep = \";\")\n    }\n  )\n  \n  function(input, output, session) {\n    session$onSessionEnded(function() {\n      stopApp()\n      q(\"no\")\n    })\n  }\n  \n})",
    "created" : 1551362846301.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "217|36|255|2|\n272|46|281|2|\n321|34|344|2|\n",
    "hash" : "2715606998",
    "id" : "D88F11BF",
    "lastKnownWriteTime" : 1551380391,
    "last_content_update" : 1551380391434,
    "path" : "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}