{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(ggplot2) # load ggplot\nlibrary(scales)\nlibrary(reshape2)\nlibrary(plyr)\nlibrary(dygraphs)\nlibrary(xts)\nlibrary(shinythemes)\nlibrary(forecast)\nlibrary(ggfortify)\nlibrary(depmixS4)\n\ndyCrosshair <- function(dygraph, \n                        direction = c(\"both\", \"horizontal\", \"vertical\")) {\n  dyPlugin(\n    dygraph = dygraph,\n    name = \"Crosshair\",\n    path = system.file(\"crosshair.js\", \n                       package = \"dygraphs\"),\n    options = list(direction = match.arg(direction))\n  )\n}\n\nplot_house <- function(date_range =NULL, energy_file=NULL, weather_file=NULL, pincode, huisnummer,category, use_weather=FALSE)\n{\n  if(category == \"Elektra\") {\n    energy_unit <- \"kWh\"\n    nat_avg = 9\n  } else { \n    energy_unit <- \"m^3\"\n    nat_avg <- 3.835\n  }\n  \n  house <- subset(\n    energy_file, Postcode == pincode &\n      Huisnummer == huisnummer &\n      EnergieType == category )\n  \n  house$Datum <- as.POSIXct(house$Datum, format = \"%Y-%m-%d %H:%M\", \n                       tz = \"Europe/Amsterdam\")\n  house <-\n    subset(house, select = c(Datum, Register, Meetwaarde))\n  house$Register <- as.factor(house$Register)\n  houseWide <- dcast(house, Datum ~ Register, value.var = \"Meetwaarde\" )\n  if (length(levels(house$Register)) > 1){\n  houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }\n  energyxts <-\n    xts(houseWide[,-1], order.by = houseWide$Datum)\n  \n    if (date_range == \"Day\") {\n      energy <- apply.daily(energyxts, FUN=mean)\n    }\n    else if (date_range == \"Week\") {\n      energy <- apply.weekly(energyxts, FUN=mean)\n    }\n    else if (date_range == \"Month\") {\n      energy <- apply.monthly(energyxts, FUN=mean)\n    }\n    else if(date_range==\"15min\"){\n      energy <- energyxts\n    }\n    \n    dygraph(energy, main = paste(\n      \"Energy consumption per Household : \", as.character(category)\n    )) %>%\n      dyLimit(\n        nat_avg, label = \"National Mean\", labelLoc = \"right\",\n        color = \"grey\", strokePattern = \"dashed\"\n      ) %>%\n      dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))  %>%\n      dyLegend(width = 400) %>%\n      dyHighlight(highlightSeriesOpts = list(strokeWidth = 1.5)) %>%\n      dyAxis(\"x\", drawGrid = FALSE) %>%\n      dyAxis(\n        \"y\", axisLineWidth = 0.01,drawGrid = FALSE, label = energy_unit\n      ) %>%\n      dyOptions(includeZero = TRUE)  %>%\n      dyRangeSelector()  \n  }\n\nplot_house_box <- function(energy_file=NULL, weather_file=NULL, pincode, huisnummer, register, category, use_weather=FALSE)\n{\n \n  if (category == \"Elektra\") {\n    energy_unit <- \"kWh\"\n    nat_avg = 9\n  } else { \n    energy_unit <- \"m^3\"\n    nat_avg <- 3.835\n  }\n  \n  house <- subset(\n    energy_file, Postcode == pincode &\n      Huisnummer == huisnummer &\n      EnergieType == category & Register == register\n  )\n\n  house <- subset(house, select = c(Datum, EnergieType, Meetwaarde))\n  house$EnergieType <- as.factor(house$EnergieType)\n  \n  ggplot(house) + \n    geom_boxplot(aes_string(y=Meetwaarde, x=reorder(format(house$Datum, '%b-%Y'), house$Datum), \n                     fill = EnergieType)) + ylab(energy_unit) +\n    labs(title  = \"Energy consumption boxplot\") +\n    theme(\n      axis.text.x = element_text(\n        angle = 90, vjust = 0.5, hjust = 1\n      ),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      panel.background = element_blank(),\n      legend.text = element_text(size = 15,face = \"bold\")\n    )\n\n\n}\n\nplot_pincode <- function(date_range =NULL, energy_file=NULL, weather_file=NULL, pincode, category, use_weather=FALSE)\n{\n  if (category == \"Elektra\") {\n    energy_unit <- \"kWh\"\n    nat_avg = 9\n  } else { \n    energy_unit <- \"m^3\"\n    nat_avg <- 3.835\n  }\n  \n  house <- subset(\n    energy_file, Postcode == pincode &\n      EnergieType == category )\n  \n  house$Datum <-\n    as.POSIXct(house$Datum, format = \"%Y-%m-%d %H:%M\", \n               tz = \"Europe/Amsterdam\")\n  \n  house <-\n    subset(house, select = c(Datum, Huisnummer, Register, Meetwaarde))\n  house$Register <- as.factor(house$Register)\n  house$Huisnummer <- as.factor(house$Huisnummer)\n  \n  if(category==\"Gas\"){\n    house$Meetwaarde[house$EnergieType == \"Gas\"] <-\n      house$Meetwaarde[house$EnergieType == \"Gas\"] * 9.769}\n  if (length(levels(house$Register)) > 1){\n    house$Meetwaarde[house$Register == \"2.8.0\"] <-\n      house$Meetwaarde[house$Register == \"2.8.0\"] * -1}  \n  \n  houseWide <- dcast(house, Datum ~ Huisnummer+Register, value.var = \"Meetwaarde\" )\n  \n  energyxts <-\n    xts(houseWide[,-1], order.by = houseWide$Datum)\n  \n\n    if (date_range == \"Day\") {\n      energy <- apply.daily(energyxts, FUN=mean)\n    }\n    else if (date_range == \"Week\") {\n      energy <- apply.weekly(energyxts, FUN=mean)\n    }\n    else if (date_range == \"Month\") {\n      energy <- apply.monthly(energyxts, FUN=mean)\n    }\n    else if(date_range==\"15min\"){\n      energy <- energyxts\n    }\n    \n    dygraph(energy, main = paste(\n      \"Energy consumption per pincode : \", as.character(category)\n    )) %>%\n      dyLimit(\n        nat_avg, label = \"National Mean\", labelLoc = \"right\",\n        color = \"grey\", strokePattern = \"dashed\"\n      ) %>%\n      dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))  %>%\n      dyLegend(width = 400) %>%\n      dyHighlight(highlightSeriesOpts = list(strokeWidth = 1.5)) %>%\n      dyAxis(\"x\", drawGrid = FALSE) %>%\n      dyAxis(\n        \"y\", axisLineWidth = 0.01,drawGrid = FALSE, label = energy_unit\n      ) %>%\n      dyOptions(includeZero = TRUE)  %>%\n      dyRangeSelector()  \n  }\n\nplot_arima <- function(energy, date_range)\n{\n  #acf(coredata(energy)[,\"net\"])\n  ar.fit <- fit_arima(energy)\n  ar.res <- data.table(date = index(energy), observed = coredata(energy)[,\"net\"], fit = as.vector(fitted(ar.fit)))\n  #ar.fit\n  ar.res <- as.xts.data.table(ar.res)\n  #plot  \n  dygraph(ar.res, main = paste(\"fit: \", as.character(date_range)), group = \"arima\" ) %>%\n    dyOptions(colors = RColorBrewer::brewer.pal(6, \"Set2\"))  %>%\n    #dyHighlight(highlightSeriesOpts = list(strokeWidth = 2.5)) %>%\n    dyAxis(\"x\", drawGrid = T) %>%\n    dyAxis(\n      \"y\",axisLineWidth = 0.01,drawGrid = T ) %>%\n    dyOptions(includeZero = TRUE) \n}\n\nplot_arima_diag <- function(energy, date_range)\n{\n  #acf(coredata(energy)[,\"net\"])\n  ar.fit <- fit_arima(energy)\n  ar.res <- data.table(date = index(energy),resid = as.vector(residuals(ar.fit)))\n  #ar.fit\n  ar.res <- as.xts.data.table(ar.res)\n  #plot  \n  dygraph(ar.res, main = paste(\"residuals: \", as.character(date_range)), group = \"arima\" ) %>%\n    dyOptions(colors = RColorBrewer::brewer.pal(6, \"Set2\"))  %>%\n    #dyHighlight(highlightSeriesOpts = list(strokeWidth = 2.5)) %>%\n    dyAxis(\"x\", drawGrid = T) %>%\n    dyAxis(\n      \"y\",axisLineWidth = 0.01,drawGrid = T ) %>%\n    dyOptions(includeZero = TRUE) \n}\n\nplot_arima_tsdiag <- function(energy)\n{\n  #acf(coredata(energy)[,\"net\"])\n  ar.fit <- fit_arima(energy)\n  ggtsdiag(ar.fit)\n}\n\narima_identify <- function(energy){\n  p1 <- autoplot(acf(coredata(energy)[,\"net\"], plot = FALSE))\n  p2 <- autoplot(pacf(coredata(energy)[,\"net\"], plot = FALSE), ylab = \"PACF\")\n  multiplot(p1, p2, cols=1)\n}\n\nfit_arima <- function(energy){\n  return(auto.arima(coredata(energy)[,\"net\"], stepwise = FALSE, trace=TRUE))\n}\n\n#fitHMM\nfit_hmm <- function(energy){\n  k=4\n  set.seed(7)\n  #kmeans cluster\n  cl <- kmeans(coredata(energy)[,\"net\"], k, nstart = 25)\n  means <- as.vector(cl$centers)\n  sds <- sqrt(cl$tot.withinss / cl$size)\n  #Create HMM model\n  resp_init <- c(rbind(means,sds))\n  mod <- depmix(net~1, data=energy, nstates=k, respstart = resp_init)\n  fit.hmm <- fit(mod, verbose = TRUE) #fit\n  return(fit.hmm)\n} \n\nmultiplot <- function(..., plotlist = NULL, cols) {\n  require(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # Make the panel\n  plotCols = cols                          # Number of columns of plots\n  plotRows = ceiling(numPlots / plotCols) # Number of rows needed, calculated from # of cols\n  \n  # Set up the page\n  grid.newpage()\n  pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))\n  vplayout <- function(x, y)\n    viewport(layout.pos.row = x, layout.pos.col = y)\n  \n  # Make each plot, in the correct location\n  for (i in 1:numPlots) {\n    curRow = ceiling(i / plotCols)\n    curCol = (i - 1) %% plotCols + 1\n    print(plots[[i]], vp = vplayout(curRow, curCol))\n  }\n  \n}\n",
    "created" : 1498575199766.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2313072513",
    "id" : "FFF342C5",
    "lastKnownWriteTime" : 1498656266,
    "last_content_update" : 1498656266972,
    "path" : "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard/Dashboard/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}