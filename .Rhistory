#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Month"
if (date_range == "Day") {
energy <- apply.daily(energyxts, FUN=mean)
}  else if (date_range == "Week") {
energy <- apply.weekly(energyxts, FUN=mean)
}  else if (date_range == "Month") {
energy <- apply.monthly(energyxts, FUN=mean)
}  else if(date_range=="15min"){
energy <- energyxts
}
#ARIMA
head(enrgy)
head(energy)
is.nan(house$Meetwaarde)
sum(is.nan(house$Meetwaarde))
summary(houseWide)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide <- houseWide[, lapply(.SD, function(x) replace(x, is.na(x), 0))]
which(house$Meetwaarde==0)
sum(which(house$Meetwaarde==0))
houseWide$`2.8.0`
houseWide <- houseWide[, lapply(.SD, function(x) replace(x, is.nan(x), 0))]
houseWide <- replace(houseWide, is.na(houseWide$`2.8.0`), 0)
houseWide$`2.8.0` <- replace(houseWide, is.na(`2.8.0`), 0)
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
summary(houseWide)
rm(list=ls())
datafile <- fread("D:\\Nitin\\ROOT/Buurkracht/Data/FinalFinalDATA/AnonymizedMemBerData/ lazoh .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Month"
if (date_range == "Day") {
energy <- apply.daily(energyxts, FUN=mean)
}  else if (date_range == "Week") {
energy <- apply.weekly(energyxts, FUN=mean)
}  else if (date_range == "Month") {
energy <- apply.monthly(energyxts, FUN=mean)
}  else if(date_range=="15min"){
energy <- energyxts
}
#ARIMA
head(energy)
head(coredata(energy))
tzone(energy)
tzone(energy) <- Sys.timezone()
tzone(energy)
periodicity(energy)
str(energy)
energy[1]
energy[:,1]
energy[,1]
energy[,1]- energy[,2]
names(energy)
arima.xts <- energy[,1]-energy[,2]
dygraph(arima.xts)
plot_arima(arima.xts, "month")
source("helpers.R")
plot_arima(arima.xts, "month")
plot_arima <- function(energy, date_range)
{
#acf(coredata(energy)[,"net"])
ar.fit <- fit_arima(energy)
ar.res <- data.table(date = index(energy), observed = coredata(energy), fit = as.vector(fitted(ar.fit)))
#ar.fit
ar.res <- as.xts.data.table(ar.res)
#plot
dygraph(ar.res, main = paste("fit: ", as.character(date_range)), group = "arima" ) %>%
dyOptions(colors = RColorBrewer::brewer.pal(6, "Set2"))  %>%
#dyHighlight(highlightSeriesOpts = list(strokeWidth = 2.5)) %>%
dyAxis("x", drawGrid = T) %>%
dyAxis(
"y",axisLineWidth = 0.01,drawGrid = T ) %>%
dyOptions(includeZero = TRUE)
}
plot_arima(arima.xts, "month")
plot_arima(arima.xts, "month")
source("helpers.R")
plot_arima(arima.xts, "month")
energy <- arima.xts
fit_arima <- function(energy){
return(auto.arima(coredata(energy), stepwise = FALSE, trace=FALSE))
}
plot_arima(arima.xts, "month")
fit <- auto.arima(WWWusage)
plot(forecast(fit,h=20))
plot_arima_diag <- function(energy, date_range)
{
#acf(coredata(energy)[,"net"])
ar.fit <- fit_arima(energy)
plot(forecast(ar.fit,h=20))
# ar.res <- data.table(date = index(energy),resid = as.vector(residuals(ar.fit)))
# #ar.fit
# ar.res <- as.xts.data.table(ar.res)
# #plot
# dygraph(ar.res, main = paste("residuals: ", as.character(date_range)), group = "arima" ) %>%
#   dyOptions(colors = RColorBrewer::brewer.pal(6, "Set2"))  %>%
#   #dyHighlight(highlightSeriesOpts = list(strokeWidth = 2.5)) %>%
#   dyAxis("x", drawGrid = T) %>%
#   dyAxis(
#     "y",axisLineWidth = 0.01,drawGrid = T ) %>%
#   dyOptions(includeZero = TRUE)
}
plot_arima(arima.xts, "month")
source("helpers.R")
plot_arima(arima.xts, "month")
plot_arima()
plot_arima(arima.xts)
plot_arima(arima.xts, "month")
ar.fit <- fit_arima(arima.xts)
forecast(ar.fit)
plot(forecast(ar.fit))
holtwi\
hw <- HoltWinters(arima.xts)
rm(list=ls())
datafile <- fread("D:\\Nitin\\ROOT/Buurkracht/Data/FinalFinalDATA/AnonymizedMemBerData/ lazoh .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Day"
if (date_range == "Day") {
energy <- apply.daily(energyxts, FUN=mean)
}  else if (date_range == "Week") {
energy <- apply.weekly(energyxts, FUN=mean)
}  else if (date_range == "Month") {
energy <- apply.monthly(energyxts, FUN=mean)
}  else if(date_range=="15min"){
energy <- energyxts
}
arima.xts <- energy[,1]-energy[,2]
head(arima.xts)
dygraph(arima.xts)
hw <- HoltWinters(arima.xts)
periodicity(arima.xts)
hw <- auto.arima(arima.xts)
head(hw)
names(hw)
p <- predict(hw, n.ahead = 36, prediction.interval = TRUE)
names(p)
p <- forecast(hw, 20)
names(p)
all <- cbind(arima.xts, p)
p
length(p)
length(p$lower)
hw <- HoltWinters(ldeaths)
p <- predict(hw, n.ahead = 72, prediction.interval = TRUE)
dygraph(p, main = "Predicted Lung Deaths (UK)") %>%
dySeries(c("lwr", "fit", "upr"), label = "Deaths")
hw <- HoltWinters(ldeaths)
p <- predict(hw, n.ahead = 36, prediction.interval = TRUE)
all <- cbind(ldeaths, p)
dygraph(all, "Deaths from Lung Disease (UK)") %>%
dySeries("ldeaths", label = "Actual") %>%
dySeries(c("p.lwr", "p.fit", "p.upr"), label = "Predicted")
head(ldeaths)
ldeaths
p
head(all)
tail(all)
class(ldeaths)
clas(arima.xts)
class(arima.xts)
test <- as.ts(arima.xts)
class(test)
hw <- HoltWinters(test)
start(arima.xts)
arima.ts <- ts(arima.xts, start = start(arima.xts), end = end(arima.xts), frequency = 7)
arima.ts <- ts(arima.xts, frequency = 7)
head(arima.ts)
install_github("joshuaulrich/xtsExtra")
install.packages("devtools")
library(devtools)
install_github("joshuaulrich/xtsExtra")
rm(list=ls())
datafile <- fread("D:\\Nitin\\ROOT/Buurkracht/Data/FinalFinalDATA/AnonymizedMemBerData/ lazoh .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Daily"
if (date_range == "Daily") {
energy <- apply.daily(energyxts, FUN=colSums)
frequency = 7
seasonal.periods=c(7, 365.25)
}  else if (date_range == "Hourly") {
energy <- period.apply(energyxts, endpoints(energyxts, "hours"), colSums)
frequency = 24*365
seasonal.periods=c(24,168,8766)
}  else if (date_range == "Monthly") {
energy <- apply.monthly(energyxts, FUN=colSums)
frequency = 12
seasonal.periods=c(12)
}  else if(date_range=="15min"){
energy <- energyxts
frequency = 60/15*24*365
seasonal.periods=c(96,336, 70128)
}
arima.xts <- energy[,1]-energy[,2]
start.year <- year(start(arima.xts))
start.month <- month(start(arima.xts))
end.year <- year(end(arima.xts))
end.month <- month(end(arima.xts))
start.ts <- c(start.year, start.month)
end.ts <- c(end.year, end.month)
arima.ts <- ts(coredata(arima.xts),
start = start.ts,
end = end.ts,
frequency = frequency
)
arima.msts <- msts(coredata(arima.xts),
start = start.ts,
end = end.ts,
seasonal.periods =  seasonal.periods)
library(scales)
library(dygraphs)
library(bit64)
library(xts)
library(forecast)
library(depmixS4)
library(data.table)
require(reshape2)
require(tidyr)
require(tsbox)
source("helpers.R")
rm(list=ls())
datafile <- fread("D:\\Nitin\\ROOT/Buurkracht/Data/FinalFinalDATA/AnonymizedMemBerData/ lazoh .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Daily"
if (date_range == "Daily") {
energy <- apply.daily(energyxts, FUN=colSums)
frequency = 7
seasonal.periods=c(7, 365.25)
}  else if (date_range == "Hourly") {
energy <- period.apply(energyxts, endpoints(energyxts, "hours"), colSums)
frequency = 24*365
seasonal.periods=c(24,168,8766)
}  else if (date_range == "Monthly") {
energy <- apply.monthly(energyxts, FUN=colSums)
frequency = 12
seasonal.periods=c(12)
}  else if(date_range=="15min"){
energy <- energyxts
frequency = 60/15*24*365
seasonal.periods=c(96,336, 70128)
}
arima.xts <- energy[,1]-energy[,2]
start.year <- year(start(arima.xts))
start.month <- month(start(arima.xts))
end.year <- year(end(arima.xts))
end.month <- month(end(arima.xts))
start.ts <- c(start.year, start.month)
end.ts <- c(end.year, end.month)
arima.ts <- ts(coredata(arima.xts),
start = start.ts,
end = end.ts,
frequency = frequency
)
arima.msts <- msts(coredata(arima.xts),
start = start.ts,
end = end.ts,
seasonal.periods =  seasonal.periods)
arima.fit <- auto.arima(arima.msts,stepwise=FALSE,seasonal = TRUE)
arima.fit
arima.forecast <- forecast(arima.fit, level = c(95), h = 32 )
arima.forecast <- forecast(arima.fit, level = c(95), h = 32 )
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
t <- as.POSIXct(format(date_decimal(as.vector(time(all))), "%Y-%m-%d %H:%M:%S"))
all.xts <- xts(data.table(all), order.by = t)
dygraph(all.xts, "Energy consumption") %>%
dySeries("actual", label = "Actual") %>%
dySeries(c("lwr", "pred", "upr"), label = "Predicted")
all
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
is.ts(arima.fit)
class(arima.fit)
arima.fit <- auto.arima(arima.msts,stepwise=FALSE,D=1)
arima.fit <- auto.arima(arima.msts,stepwise=FALSE,approximation = FALSE)
arima.fit
arima.forecast <- forecast(arima.fit, level = c(95), h = 32 )
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
library(lubridate)
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
require(timeSeries)
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
rm(list=ls())
datafile <- fread("D:\\Nitin\\ROOT/Buurkracht/Data/FinalFinalDATA/AnonymizedMemBerData/ lazoh .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Monthly"
if (date_range == "Daily") {
energy <- apply.daily(energyxts, FUN=colSums)
frequency = 7
seasonal.periods=c(7, 365.25)
}  else if (date_range == "Hourly") {
energy <- period.apply(energyxts, endpoints(energyxts, "hours"), colSums)
frequency = 24*365
seasonal.periods=c(24,168,8766)
}  else if (date_range == "Monthly") {
energy <- apply.monthly(energyxts, FUN=colSums)
frequency = 12
seasonal.periods=c(12)
}  else if(date_range=="15min"){
energy <- energyxts
frequency = 60/15*24*365
seasonal.periods=c(96,336, 70128)
}
arima.xts <- energy[,1]-energy[,2]
start.year <- year(start(arima.xts))
start.month <- month(start(arima.xts))
end.year <- year(end(arima.xts))
end.month <- month(end(arima.xts))
start.ts <- c(start.year, start.month)
end.ts <- c(end.year, end.month)
arima.ts <- ts(coredata(arima.xts),
start = start.ts,
end = end.ts,
frequency = frequency
)
arima.msts <- msts(coredata(arima.xts),
start = start.ts,
end = end.ts,
seasonal.periods =  seasonal.periods)
arima.tbats <- tbats(arima.msts)
arima.forecast <- forecast(arima.tbats, level = c(95), h = 32 )
all <- cbind(actual = arima.tbats,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
t <- as.POSIXct(format(date_decimal(as.vector(time(all))), "%Y-%m-%d %H:%M:%S"))
all.xts <- xts(data.table(all), order.by = t)
dygraph(all.xts, "Energy consumption") %>%
dySeries("actual", label = "Actual") %>%
dySeries(c("lwr", "pred", "upr"), label = "Predicted")
runApp()
library(shiny)
library(ggplot2) # load ggplot
library(scales)
library(dygraphs)
library(xts)
library(forecast)
library(ggfortify)
library(depmixS4)
require(wesanderson)
require(lubridate)
library(shiny)
library(ggplot2) # load ggplot
library(scales)
library(dygraphs)
library(xts)
library(forecast)
library(ggfortify)
library(depmixS4)
require(wesanderson)
require(lubridate)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinycssloaders")
shiny::runApp()
install.packages("depmixS4", dependencies = T)
library(shiny)
runApp()
install.packages("depmixS4")
install.packages("installr")
