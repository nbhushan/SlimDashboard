end = end.ts,
frequency = frequency
)
arima.msts <- msts(coredata(arima.xts),
start = start.ts,
end = end.ts,
seasonal.periods =  seasonal.periods)
arima.fit <- auto.arima(arima.msts,stepwise=FALSE,seasonal = TRUE)
arima.fit
arima.forecast <- forecast(arima.fit, level = c(95), h = 32 )
arima.forecast <- forecast(arima.fit, level = c(95), h = 32 )
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
t <- as.POSIXct(format(date_decimal(as.vector(time(all))), "%Y-%m-%d %H:%M:%S"))
all.xts <- xts(data.table(all), order.by = t)
dygraph(all.xts, "Energy consumption") %>%
dySeries("actual", label = "Actual") %>%
dySeries(c("lwr", "pred", "upr"), label = "Predicted")
all
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
is.ts(arima.fit)
class(arima.fit)
arima.fit <- auto.arima(arima.msts,stepwise=FALSE,D=1)
arima.fit <- auto.arima(arima.msts,stepwise=FALSE,approximation = FALSE)
arima.fit
arima.forecast <- forecast(arima.fit, level = c(95), h = 32 )
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
library(lubridate)
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
require(timeSeries)
all <- cbind(actual = arima.fit,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
rm(list=ls())
datafile <- fread("D:\\Nitin\\ROOT/Buurkracht/Data/FinalFinalDATA/AnonymizedMemBerData/ lazoh .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
date_range = "Monthly"
if (date_range == "Daily") {
energy <- apply.daily(energyxts, FUN=colSums)
frequency = 7
seasonal.periods=c(7, 365.25)
}  else if (date_range == "Hourly") {
energy <- period.apply(energyxts, endpoints(energyxts, "hours"), colSums)
frequency = 24*365
seasonal.periods=c(24,168,8766)
}  else if (date_range == "Monthly") {
energy <- apply.monthly(energyxts, FUN=colSums)
frequency = 12
seasonal.periods=c(12)
}  else if(date_range=="15min"){
energy <- energyxts
frequency = 60/15*24*365
seasonal.periods=c(96,336, 70128)
}
arima.xts <- energy[,1]-energy[,2]
start.year <- year(start(arima.xts))
start.month <- month(start(arima.xts))
end.year <- year(end(arima.xts))
end.month <- month(end(arima.xts))
start.ts <- c(start.year, start.month)
end.ts <- c(end.year, end.month)
arima.ts <- ts(coredata(arima.xts),
start = start.ts,
end = end.ts,
frequency = frequency
)
arima.msts <- msts(coredata(arima.xts),
start = start.ts,
end = end.ts,
seasonal.periods =  seasonal.periods)
arima.tbats <- tbats(arima.msts)
arima.forecast <- forecast(arima.tbats, level = c(95), h = 32 )
all <- cbind(actual = arima.tbats,
lwr = arima.forecast$lower,
upr = arima.forecast$upper,
pred = arima.forecast$mean)
t <- as.POSIXct(format(date_decimal(as.vector(time(all))), "%Y-%m-%d %H:%M:%S"))
all.xts <- xts(data.table(all), order.by = t)
dygraph(all.xts, "Energy consumption") %>%
dySeries("actual", label = "Actual") %>%
dySeries(c("lwr", "pred", "upr"), label = "Predicted")
runApp()
library(shiny)
library(ggplot2) # load ggplot
library(scales)
library(dygraphs)
library(xts)
library(forecast)
library(ggfortify)
library(depmixS4)
require(wesanderson)
require(lubridate)
library(shiny)
library(ggplot2) # load ggplot
library(scales)
library(dygraphs)
library(xts)
library(forecast)
library(ggfortify)
library(depmixS4)
require(wesanderson)
require(lubridate)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinycssloaders")
shiny::runApp()
install.packages("depmixS4", dependencies = T)
library(shiny)
runApp()
install.packages("depmixS4")
install.packages("installr")
library(scales)
library(dygraphs)
library(bit64)
library(xts)
library(forecast)
library(depmixS4)
library(data.table)
require(reshape2)
require(tidyr)
require(tsbox)
library(lubridate)
require(mgcv)
require(car)
source("helpers.R")
rm(list=ls())
datafile <- fread("exampleData/tinut .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
print(periodicity(energyxts))
date_range = "Hourly"
if (date_range == "Daily") {
energy <- apply.daily(energyxts, FUN=colSums)
frequency = 7*365
seasonal.periods=c(7, 365.25)
h=14
}  else if (date_range == "Hourly") {
energy <- period.apply(energyxts, endpoints(energyxts, "hours"), colSums)
frequency = 24
seasonal.periods=c(24,168)
h=24*7
}  else if (date_range == "Monthly") {
energy <- apply.monthly(energyxts, FUN=colSums)
frequency = 12
seasonal.periods=c(12)
h=2
}  else if(date_range=="15min"){
energy <- energyxts
frequency = 60/15*24*365
seasonal.periods=c(96,336, 70128)
h=4*24
}
print(periodicity(energy))
dygraph(energy)
arima.xts <- energy[,1] - energy[,2]
colnames(arima.xts) <- "Meetwaarde"
# # print(periodicity(arima.xts))
# # dygraph(arima.xts)
# #
# # start.year <- year(start(arima.xts))
# # start.month <- month(start(arima.xts))
# # end.year <- year(end(arima.xts))
# # end.month <- month(end(arima.xts))
# # start.ts <- c(start.year, start.month)
# # end.ts <- c(end.year, end.month)
# #
# # arima.ts <- as.ts(coredata(arima.xts),
# #                frequency = frequency
# #                )
# # #arima.ts <- as.ts(arima.xts)
# #
# #
# # arima.msts <- msts(coredata(arima.xts),
# #                    seasonal.periods =  seasonal.periods)
# #
# # #arima.ts <- ts_timeSeries(arima.xts)
# # arima.fit <- auto.arima(arima.msts,seasonal = T, parallel = TRUE)
# # #arima.tbats <- tbats(arima.msts)
# # arima.forecast <- forecast(arima.fit, level = c(80), h = h )
# # all <- cbind(actual = arima.forecast$x,
# #              lwr = arima.forecast$lower,
# #              upr = arima.forecast$upper,
# #              pred = arima.forecast$mean)
# #
# # fut.time <- tk_make_future_timeseries(index(arima.xts),h)
# # t <- append(index(arima.xts),fut.time)
# # all.xts <- xts(data.table(all), order.by = t)
# # print(periodicity(all.xts))
# #
# dygraph(all.xts, "Energy consumption") %>%
#   dySeries("actual", label = "Actual") %>%
#   dySeries(c("lwr", "pred", "upr"), label = "Predicted")
#GAM
gam.df <- as.data.table(arima.xts)
gam.df[,'week_day'] <- lubridate::wday(gam.df$index, label=FALSE)
gam.df[,'hour_of_day'] <- lubridate::hour(gam.df$index)
gam.df[,'month'] <- lubridate::month(gam.df$index)
period <- 24
window <- N / period # number of days in the train set
matrix.gam <- data.table(Load = gam.df[, Meetwaarde],
Daily = gam.df[,hour_of_day],
Weekly = gam.df[, week_day],
Month = gam.df[,month])
head(gam.df)
head(matrix.gam)
gam_1 <- gam(Load ~ s(Daily)+s(Weekly)+s(Month),
data = matrix.gam,
family = gaussian)
gam_1 <- gam(Load ~ s(Daily)+s(Weekly),
data = matrix.gam,
family = gaussian)
gam_1 <- gam(Load ~ s(Daily, bs = "cr", k = period) +
s(Weekly, bs = "ps", k = 7),
data = matrix.gam,
family = gaussian)
gam_1 <- gam(Load ~ s(Daily, bs = "cr", k = period) +
s(Weekly, bs = "ps", k = 7)+
s(Month, bs = "ps", k = 7),
data = matrix.gam,
family = gaussian)
layout(matrix(1:3, nrow = 1))
plot(gam_1, shade = TRUE)
gam_2 <- gam(Load ~ s(Daily, Weekly),
data = matrix.gam,
family = gaussian)
layout(matrix(1:2, nrow = 1))
plot(gam_2, shade = TRUE)
plot(gam_2, shade = TRUE)
dev.off()
plot(gam_2, shade = TRUE)
install.packages("visreg")
visreg::visreg(gam_2, "Daily", gg = TRUE )
visreg::visreg(gam_2, "Daily", gg = TRUE )+theme(b2)
visreg::visreg(gam_2, "Daily", gg = TRUE )+theme(bw)
visreg::visreg(gam_2, "Daily", gg = TRUE )+theme_bw()
visreg::visreg(gam_2, "Daily", gg = TRUE, ylab="test" )+theme_bw()
visreg::visreg(gam_2, "Daily", gg = TRUE, ylab="kWh" )+theme_bw()
visreg::visreg(gam_2, "Daily", gg = TRUE, ylab="kWh", xlab="hours of the day" )+theme_bw()
visreg::visreg(gam_2, "Daily", gg = TRUE, ylab="kWh", xlab="Hour of the day" )+theme_bw()
visreg::visreg(gam_2, "Weekly", gg = TRUE, ylab="kWh", xlab="Hour of the day" )+theme_bw()
summary(gam_2)
gam_1 <- gam(Load ~ s(Daily, Weekly,Month,
k = c(period, 7, 7),
bs = c("cr"),
full = TRUE),
data = matrix.gam,
family = gaussian)
summary(gam_1)
visreg::visreg(gam_1, "Weekly", gg = TRUE, ylab="kWh", xlab="Hour of the day" )+theme_bw()
visreg::visreg(gam_1, "Month", gg = TRUE, ylab="kWh", xlab="Hour of the day" )+theme_bw()
visreg::visreg(gam_1, "Daily", gg = TRUE, ylab="kWh", xlab="Hour of the day" )+theme_bw()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
multiplot(g1, g2, g3, cols = 1)
runApp()
rm(list=ls())
datafile <- fread("exampleData/tinut .csv", sep=";", dec=".")
#https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-an-r-dataframe
for (j in names(datafile)) set(datafile,which(is.nan(datafile[[j]])),j,0)
category <- "Elektra"
if (category == "Elektra") {
energy_unit <- "kWh"
nat_avg = 9
} else {
energy_unit <- "m^3"
nat_avg <- 3.835
}
house <- subset(
datafile, EAN = "0e9adaec9f132d7d5418e6a3066ff0ee" & EnergieType == "Elektra" )
#"2017-06-28T00:00:00Z"
house$Datum <-
as.POSIXct(house$Datum, format="%Y-%m-%dT%H:%M:%SZ",
tz = "Europe/Amsterdam")
house <- na.omit(house, cols="Datum", invert=FALSE)
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde", fun.aggregate = mean )
houseWide$`2.8.0` <- replace(houseWide$`2.8.0`, is.na(houseWide$`2.8.0`), 0)
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
print(periodicity(energyxts))
date_range = "Hourly"
if (date_range == "Daily") {
energy <- apply.daily(energyxts, FUN=colSums)
frequency = 7*365
seasonal.periods=c(7, 365.25)
h=14
}  else if (date_range == "Hourly") {
energy <- period.apply(energyxts, endpoints(energyxts, "hours"), colSums)
frequency = 24
seasonal.periods=c(24,168)
h=24*7
}  else if (date_range == "Monthly") {
energy <- apply.monthly(energyxts, FUN=colSums)
frequency = 12
seasonal.periods=c(12)
h=2
}  else if(date_range=="15min"){
energy <- energyxts
frequency = 60/15*24*365
seasonal.periods=c(96,336, 70128)
h=4*24
}
print(periodicity(energy))
dygraph(energy)
arima.xts <- energy[,1] - energy[,2]
colnames(arima.xts) <- "Meetwaarde"
# # print(periodicity(arima.xts))
# # dygraph(arima.xts)
# #
# # start.year <- year(start(arima.xts))
# # start.month <- month(start(arima.xts))
# # end.year <- year(end(arima.xts))
# # end.month <- month(end(arima.xts))
# # start.ts <- c(start.year, start.month)
# # end.ts <- c(end.year, end.month)
# #
# # arima.ts <- as.ts(coredata(arima.xts),
# #                frequency = frequency
# #                )
# # #arima.ts <- as.ts(arima.xts)
# #
# #
# # arima.msts <- msts(coredata(arima.xts),
# #                    seasonal.periods =  seasonal.periods)
# #
# # #arima.ts <- ts_timeSeries(arima.xts)
# # arima.fit <- auto.arima(arima.msts,seasonal = T, parallel = TRUE)
# # #arima.tbats <- tbats(arima.msts)
# # arima.forecast <- forecast(arima.fit, level = c(80), h = h )
# # all <- cbind(actual = arima.forecast$x,
# #              lwr = arima.forecast$lower,
# #              upr = arima.forecast$upper,
# #              pred = arima.forecast$mean)
# #
# # fut.time <- tk_make_future_timeseries(index(arima.xts),h)
# # t <- append(index(arima.xts),fut.time)
# # all.xts <- xts(data.table(all), order.by = t)
# # print(periodicity(all.xts))
# #
# dygraph(all.xts, "Energy consumption") %>%
#   dySeries("actual", label = "Actual") %>%
#   dySeries(c("lwr", "pred", "upr"), label = "Predicted")
#GAM
gam.df <- as.data.table(arima.xts)
gam.df[,'week_day'] <- as.factor(lubridate::wday(gam.df$index, label=FALSE))
gam.df[,'hour_of_day'] <- as.factor(lubridate::hour(gam.df$index))
gam.df[,'month'] <- as.factor(lubridate::month(gam.df$index))
period <- 24
window <- N / period # number of days in the train set
matrix.gam <- data.table(Load = gam.df[, Meetwaarde],
Daily = gam.df[,hour_of_day],
Weekly = gam.df[, week_day],
Month = gam.df[,month])
gam_1 <- gam(Load ~ s(Daily, bs = "cr", k = period) +
s(Weekly, bs = "ps", k = 7)+
s(Month, bs = "ps", k = 7),
data = matrix.gam,
family = gaussian)
gam_1 <- gam(Load ~ s(Daily, Weekly,Month,
k = c(period, 7, 7),
bs = c("cr", "ps", "cc"),
full = TRUE),
data = matrix.gam,
family = gaussian)
layout(matrix(1:3, nrow = 1))
plot(gam_1, shade = TRUE)
#GAM
gam.df <- as.data.table(arima.xts)
gam.df[,'week_day'] <- lubridate::wday(gam.df$index, label=FALSE)
gam.df[,'hour_of_day'] <- lubridate::hour(gam.df$index)
gam.df[,'month'] <- lubridate::month(gam.df$index)
period <- 24
window <- N / period # number of days in the train set
matrix.gam <- data.table(Load = gam.df[, Meetwaarde],
Daily = gam.df[,hour_of_day],
Weekly = gam.df[, week_day],
Month = gam.df[,month])
gam_1 <- gam(Load ~ s(Daily, Weekly,Month,
k = c(period, 7, 7),
bs = c("cr", "ps", "cc"),
full = TRUE),
data = matrix.gam,
family = gaussian)
gam_1 <- gam(Load ~ s(Daily, bs = "cr", k = period) +
s(Weekly, bs = "ps", k = 7)+
s(Month, bs = "cc", k = 7),
data = matrix.gam,
family = gaussian)
layout(matrix(1:3, nrow = 1))
plot(gam_1, shade = TRUE)
runApp()
viz.gamm <- function(gam.df) {
res <- fit.gamm(gam.df)
gam_1 <- res$mod
gam_1$data <- res$data
# g1 <- visreg::visreg(gam_1, "Daily", gg = TRUE, ylab="kWh", xlab="Hour of the day" )+theme_bw()
# g2 <- visreg::visreg(gam_1, "Weekly", gg = TRUE, ylab="kWh", xlab="Days of the week" )+theme_bw()
# g3 <- visreg::visreg(gam_1, "Month", gg = TRUE, ylab="kWh", xlab="Month of the year" )+theme_bw()
# multiplot(g1, g2, g3, cols = 1)
layout(matrix(1:3, nrow = 1))
plot(gam_1, shade = TRUE)
}
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2) # load ggplot
library(scales)
library(dygraphs)
library(xts)
library(forecast)
library(ggfortify)
library(depmixS4)
require(wesanderson)
require(lubridate)
#library(visreg)
library(mgcv)
library(data.table)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
