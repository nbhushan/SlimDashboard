devtools::install_github("ficonsulting/RInno",  build_vignettes = TRUE)
R
devtools::install_github("ficonsulting/RInno",  build_vignettes = TRUE)
devtools::install_github("ficonsulting/RInno",  build_vignettes = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
devtools::install_github("ficonsulting/RInno",  build_vignettes = TRUE)
require(RInno)
RInno::install_inno()
example_app(wd = getwd())
# Build an installer
create_app(app_name = "slimDashboard", app_dir = "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard")
compile_iss()
create_app(
app_name    = "slimDashboard",
app_dir     = "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard",
dir_out     = "wizard",
pkgs        = c("jsonlite","shiny","scales","ggplot2","data.table","bit64",
"dygraphs","xts", "shinythemes","forecast","ggfortify","depmixS4"),  # CRAN-like repo packages
remotes     = c("talgalili/installr", "daattali/shinyjs"), # GitHub packages
include_R   = TRUE,   # Download R and install it with your app, if necessary
privilege   = "high", # Admin only installation
default_dir = "pf")   # Install app in to Program Files
compile_iss()
create_app(
app_name    = "slimDashboard",
app_dir     = "D:/Nitin/ROOT/Buurkracht/Dashboard/Git/slimDashboard",
dir_out     = "wizard",
pkgs        = c("jsonlite","shiny","scales","ggplot2","data.table","bit64",
"dygraphs","xts", "shinythemes","forecast","ggfortify","depmixS4"),  # CRAN-like repo packages
remotes     = c("talgalili/installr", "daattali/shinyjs"), # GitHub packages
include_R   = TRUE,   # Download R and install it with your app, if necessary
default_dir = "pf")   # Install app in to Program Files
compile_iss()
#library(ggplot2) # load ggplot
library(scales)
library(data.table)
#library(reshape2)
#library(plyr)
library(dygraphs)
library(bit64)
library(xts)
library(forecast)
library(depmixS4)
rm(list=ls())
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/beers.csv", sep=";", dec=".", fill=TRUE)
library(data.table)
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/beers.csv", sep=";", dec=".", fill=TRUE)
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/beers.csv", sep=";", dec=".")
version(data.table)
data.table()
data.table_version
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/afferden.csv", sep=";", dec=".")
library(bit64)
#library(ggplot2) # load ggplot
library(scales)
library(data.table)
#library(reshape2)
#library(plyr)
library(dygraphs)
library(bit64)
library(xts)
library(forecast)
library(depmixS4)
#library(ggplot2) # load ggplot
library(scales)
library(data.table)
#library(reshape2)
#library(plyr)
library(dygraphs)
library(bit64)
library(xts)
library(forecast)
library(depmixS4)
install.packages("bit64")
rm(list=ls())
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/afferden.csv", sep=";", dec=".")
library(bit64)
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/afferden.csv", sep=";", dec=".")
house <- subset(
datafile, Postcode == "5437AR" & Huisnummer == "37" & EnergieType == "Elektra" )
str(datafile)
house <- subset(
datafile, Postcode == "5851AD" & Huisnummer == "11" & EnergieType == "Elektra" )
house$Datum <-
as.POSIXct(house$Datum, format = "%Y-%m-%d %H:%M",
tz = "Europe/Amsterdam")
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde" )
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
houseWide$net <- houseWide$`1.8.0`+ houseWide$`2.8.0`
View(houseWide)
energy <- energyxts
k=3
set.seed(7)
#kmeans cluster
cl <- kmeans(coredata(energy)[,"net"], k, nstart = 25)
means <- as.vector(cl$centers)
sds <- sqrt(cl$tot.withinss / cl$size)
#Create HMM model
resp_init <- c(rbind(means,sds))
mod <- depmix(net~1, data=energy, nstates=k, respstart = resp_init)
fit.hmm <- fit(mod, verbose = F) #fit
probs <- posterior(fit.hmm)
energy <- energyxts
k=3
set.seed(7)
#kmeans cluster
cl <- kmeans(coredata(energy)[,"net"], k, nstart = 25)
means <- as.vector(cl$centers)
sds <- sqrt(cl$tot.withinss / cl$size)
#Create HMM model
resp_init <- c(rbind(means,sds))
mod <- depmix(net~1, data=energy, nstates=k, respstart = resp_init)
fit.hmm <- fit(mod, verbose = F) #fit
probs <- posterior(fit.hmm)
# Lets change the name
colnames(probs)[2:4] <- paste("S",1:k, sep="-")
# Create dta.frame
dfu <- cbind(datum=index(energy),net=coredata(energy)[,"net"], probs[,2:4])
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
summary(houseWide)
str(houseWide)
energyxts <-
xts(houseWide[,-1], order.by = houseWide$Datum)
energyxts <-
xts(houseWide[-1], order.by = houseWide$Datum)
energyxts <-
xts(houseWide[.-1], order.by = houseWide$Datum)
length(houseWide$Datum)
length(houseWide$net)
length(houseWide$`1.8.0`)
length(houseWide$`2.8.0`)
class(houseWide$Datum)
energyxts <-
xts(houseWide[.-1], order.by = as.Date(houseWide$Datum))
energyxts <-
xts(houseWide[,-1], order.by = as.Date(houseWide$Datum))
rm(list=ls())
datafile <- fread("D:/Nitin/ROOT/Buurkracht/Data/Final Dataset/Export/afferden.csv", sep=";", dec=".")
house <- subset(
datafile, Postcode == "5851AD" & Huisnummer == "11" & EnergieType == "Elektra" )
house$Datum <-
as.POSIXct(house$Datum, format = "%Y-%m-%d %H:%M",
tz = "Europe/Amsterdam")
house <-
subset(house, select = c(Datum, Register, Meetwaarde))
house$Register <- as.factor(house$Register)
houseWide <- dcast(house, Datum ~ Register, value.var = "Meetwaarde" )
if (length(levels(house$Register)) > 1){
houseWide$`2.8.0` <- houseWide$`2.8.0`* -1 }
houseWide$net <- houseWide$`1.8.0`+ houseWide$`2.8.0`
energyxts <-
xts(houseWide[,-1], order.by = as.Date(houseWide$Datum))
NROW(houseWide)
NROW(houseWide$Datum)
class(houseWide0
class(houseWide)
energyxts <-
as.xts.data.table(houseWide[,-1], order.by = as.Date(houseWide$Datum))
energyxts <- as.xts.data.table(houseWide)
View(energyxts)
energy <- energyxts
k=3
set.seed(7)
#kmeans cluster
cl <- kmeans(coredata(energy)[,"net"], k, nstart = 25)
means <- as.vector(cl$centers)
sds <- sqrt(cl$tot.withinss / cl$size)
#Create HMM model
resp_init <- c(rbind(means,sds))
mod <- depmix(net~1, data=energy, nstates=k, respstart = resp_init)
mod
fit.hmm <- fit(mod, verbose = F) #fit
probs <- posterior(fit.hmm)
colnames(probs)[2:(k+1)] <- paste("S",1:k, sep="-")
dfu <- cbind(datum=index(energy),net=coredata(energy)[,"net"], probs[,2:(k+1)])
class(dfu)
dfm <- as.xts.data.table(dfu)
dfu <- data.table(cbind(datum=index(energy),net=coredata(energy)[,"net"], probs[,2:(k+1)]))
dfm <- as.xts.data.table(dfu)
dygraph(dfm)
dfm[1]
dfm[2]
dfm[,2]
net=coredata(energy)[,"net"]
hist(net)
install.packages("markovchain", dependencies = TRUE)
fit.hmm
class(fit.hmm)
summary(fit.hmm)
fit.hmm
fit.hmm$
s
transition(fit.hmm)
mod
mod$
tranistion
transition(mod)
getmodel(fit.hmm,"transition")
summary(fit.hmm)
getmodel(fit.hmm,"transition",c(1,2,3))
getmodel(fit.hmm,"transition")
fit.hmm
getpars(fit.hmm)
str(getpars(fit.hmm))
names(getpars(fit.hmm))
getpars(fit.hmm)[k+1:(k*k)+k]
k
getpars(fit.hmm)[k]
getpars(fit.hmm)[k+1]
getpars(fit.hmm)[k+1:6]
getpars(fit.hmm)[k+1:k+(k*K)]
getpars(fit.hmm)[k+1:k+(k*k)]
getpars(fit.hmm)[k+1:(k+(k*k))]
getpars(fit.hmm)[4:12]
k+(k*k)
getpars(fit.hmm)[(k+1):(k+(k*k))]
require(markovchain)
tr <- matrix(getpars(fit.hmm)[(k+1):(k+(k*k))], byrow = TRUE, nrow=k)
tr
summary(fit.hmm)
myMC <- as(tr, "markovchain")
plot(myMC)
require(qgraph)
install.packages("qgraph")
install.packages("qgraph")
qgraph(tr)
require(qgraph)
qgraph(tr)
install.packages("Rcpp")
qgraph(tr)
qgraph(tr)
require(qgraph)
qgraph(tr)
install.packages("qgraph", dependencies = TRUE)
require(qgraph)
